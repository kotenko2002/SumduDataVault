import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "~/components/ui/card";
import { Button } from "~/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "~/components/ui/table";
import { Label } from "~/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "~/components/ui/select";
import { Input } from "~/components/ui/input";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "~/components/ui/collapsible";
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "~/components/ui/pagination";
import { Filter, RotateCcw, ChevronDown, ChevronUp } from "lucide-react";
import GetRequestsListService from '../services/api/approval/View/GetRequestsListService';
import type { ApprovalRequestDto, RequestType, RequestStatus, ApprovalRequestFiltersDto } from '../services/api/approval/types';
import { UserAutocomplete } from '../components/UserAutocomplete';

export default function ApprovalRequests() {
  const navigate = useNavigate();
  const [requests, setRequests] = useState<ApprovalRequestDto[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  // –°—Ç–∞–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const [filters, setFilters] = useState<ApprovalRequestFiltersDto>({});
  const [requestTypeFilter, setRequestTypeFilter] = useState<string>("all");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [userNameFilter, setUserNameFilter] = useState<string>("");
  const [createdFromFilter, setCreatedFromFilter] = useState<string>("");
  const [createdToFilter, setCreatedToFilter] = useState<string>("");
  
  // –°—Ç–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º —Å–µ–∫—Ü—ñ–π
  const [isBasicFiltersOpen, setIsBasicFiltersOpen] = useState(true);
  const [isUserFiltersOpen, setIsUserFiltersOpen] = useState(false);
  const [isDateFiltersOpen, setIsDateFiltersOpen] = useState(false);
  
  // –°—Ç–∞–Ω –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const [page, setPage] = useState(1);
  const [pageSize] = useState(10); // –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const [totalCount, setTotalCount] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  const getRequestTypeLabel = (requestType: RequestType): string => {
    switch (requestType) {
      case 0:
        return '–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö';
      case 1:
        return '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É';
      default:
        return '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø';
    }
  };

  const getRequestTypeColors = (requestType: RequestType): { bg: string; text: string } => {
    switch (requestType) {
      case 0: // –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö
        return {
          bg: 'bg-blue-100',
          text: 'text-blue-800'
        };
      case 1: // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É
        return {
          bg: 'bg-green-100',
          text: 'text-green-800'
        };
      default:
        return {
          bg: 'bg-gray-100',
          text: 'text-gray-800'
        };
    }
  };

  const getRequestStatusLabel = (status: string): string => {
    switch (status) {
      case 'Pending':
        return '–û—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É';
      case 'Approved':
        return '–°—Ö–≤–∞–ª–µ–Ω–æ';
      case 'Rejected':
        return '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ';
      case 'Canceled':
        return '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
      default:
        return status;
    }
  };

  const getRequestStatusColors = (status: string): { bg: string; text: string } => {
    switch (status) {
      case 'Pending':
        return {
          bg: 'bg-yellow-100',
          text: 'text-yellow-800'
        };
      case 'Approved':
        return {
          bg: 'bg-green-100',
          text: 'text-green-800'
        };
      case 'Rejected':
        return {
          bg: 'bg-red-100',
          text: 'text-red-800'
        };
      case 'Canceled':
        return {
          bg: 'bg-gray-100',
          text: 'text-gray-800'
        };
      default:
        return {
          bg: 'bg-gray-100',
          text: 'text-gray-800'
        };
    }
  };


  const applyFilters = () => {
    const newFilters: ApprovalRequestFiltersDto = {};
    
    if (requestTypeFilter && requestTypeFilter !== "all") {
      newFilters.requestType = parseInt(requestTypeFilter) as RequestType;
    }
    
    if (statusFilter && statusFilter !== "all") {
      newFilters.status = parseInt(statusFilter) as RequestStatus;
    }
    
    if (userNameFilter && userNameFilter.trim()) {
      newFilters.userFullName = userNameFilter.trim();
    }
    
    if (createdFromFilter) {
      newFilters.createdFrom = new Date(createdFromFilter).toISOString();
    }
    
    if (createdToFilter) {
      newFilters.createdTo = new Date(createdToFilter).toISOString();
    }
    
    setFilters(newFilters);
    setPage(1); // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  };


  const clearFilters = () => {
    setRequestTypeFilter("all");
    setStatusFilter("all");
    setUserNameFilter("");
    setCreatedFromFilter("");
    setCreatedToFilter("");
    setFilters({});
    setPage(1); // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  };

  const fetchRequests = async (pageNumber?: number) => {
    setIsLoading(true);
    try {
      const currentPage = pageNumber ?? page;
      const skip = (currentPage - 1) * pageSize;
      
      const requestFilters: ApprovalRequestFiltersDto = {
        ...filters,
        skip: skip,
        take: pageSize
      };
      
      const requestsData = await GetRequestsListService.getRequestsList(requestFilters);
      console.log('Requests data:', requestsData);
      setRequests(requestsData);
      
      // –û—Å–∫—ñ–ª—å–∫–∏ –Ω–∞—à API –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î totalCount, –º–∏ –æ—Ü—ñ–Ω—é—î–º–æ –π–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–µ–Ω—à–µ –∑–∞–ø–∏—Å—ñ–≤ –Ω—ñ–∂ pageSize, —Ç–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
      if (requestsData.length < pageSize) {
        setTotalCount(skip + requestsData.length);
        setTotalPages(currentPage);
      } else {
        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, —Ç–æ –º–æ–∂–ª–∏–≤–æ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        setTotalCount(skip + requestsData.length + 1); // +1 —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        setTotalPages(currentPage + 1);
      }
      
      setPage(currentPage);
    } catch (error) {
      console.error('Failed to fetch requests', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
  const goToPrev = () => {
    if (page > 1) {
      fetchRequests(page - 1);
    }
  };

  const goToNext = () => {
    if (page < totalPages) {
      fetchRequests(page + 1);
    }
  };

  const goToPage = (pageNumber: number) => {
    if (pageNumber >= 1 && pageNumber <= totalPages && pageNumber !== page) {
      fetchRequests(pageNumber);
    }
  };

  // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (1 .. totalPages) –∑ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è–º
  const renderPageNumbers = () => {
    const pages: number[] = [];
    const maxButtons = 5;
    if (totalPages <= maxButtons) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else {
      const start = Math.max(1, page - 2);
      const end = Math.min(totalPages, start + maxButtons - 1);
      for (let i = start; i <= end; i++) pages.push(i);
    }
    return pages;
  };

  useEffect(() => {
    fetchRequests();
  }, [filters]);

  useEffect(() => {
    fetchRequests();
  }, []);

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6">
        <h1 className="text-3xl font-bold tracking-tight">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏</h1>
      </div>

      {/* –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –º–∞–∫–µ—Ç: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –¥–ª—è –º–∞–ª–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö */}
      <div className="flex flex-col lg:flex-row lg:gap-6">
        {/* –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ - –∑–ª—ñ–≤–∞ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö */}
        <div className="lg:w-80 lg:flex-shrink-0 mb-6 lg:mb-0">
          <Card className="sticky top-4">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Filter className="h-4 w-4" />
                –§—ñ–ª—å—Ç—Ä–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* –ë–∞–∑–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
              <Collapsible open={isBasicFiltersOpen} onOpenChange={setIsBasicFiltersOpen}>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" size="sm" className="w-full justify-between h-8 text-sm">
                    üîç –ë–∞–∑–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
                    {isBasicFiltersOpen ? <ChevronUp className="h-3 w-3" /> : <ChevronDown className="h-3 w-3" />}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="space-y-3 mt-3">
                  <div className="space-y-3">
                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º –∑–∞–ø–∏—Ç—É */}
                    <div className="space-y-2">
                      <Label htmlFor="request-type-filter" className="text-sm">–¢–∏–ø –∑–∞–ø–∏—Ç—É</Label>
                      <Select value={requestTypeFilter} onValueChange={setRequestTypeFilter}>
                        <SelectTrigger className="h-9 w-full">
                          <SelectValue placeholder="–í—Å—ñ —Ç–∏–ø–∏" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">–í—Å—ñ —Ç–∏–ø–∏</SelectItem>
                          <SelectItem value="0">–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö</SelectItem>
                          <SelectItem value="1">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º */}
                    <div className="space-y-2">
                      <Label htmlFor="status-filter" className="text-sm">–°—Ç–∞—Ç—É—Å</Label>
                      <Select value={statusFilter} onValueChange={setStatusFilter}>
                        <SelectTrigger className="h-9 w-full">
                          <SelectValue placeholder="–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</SelectItem>
                          <SelectItem value="0">–û—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É</SelectItem>
                          <SelectItem value="1">–°—Ö–≤–∞–ª–µ–Ω–æ</SelectItem>
                          <SelectItem value="2">–í—ñ–¥—Ö–∏–ª–µ–Ω–æ</SelectItem>
                          <SelectItem value="3">–°–∫–∞—Å–æ–≤–∞–Ω–æ</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CollapsibleContent>
              </Collapsible>

              {/* –§—ñ–ª—å—Ç—Ä–∏ –¥–∞—Ç */}
              <Collapsible open={isDateFiltersOpen} onOpenChange={setIsDateFiltersOpen}>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" size="sm" className="w-full justify-between h-8 text-sm">
                    üìÖ –§—ñ–ª—å—Ç—Ä–∏ –¥–∞—Ç
                    {isDateFiltersOpen ? <ChevronUp className="h-3 w-3" /> : <ChevronDown className="h-3 w-3" />}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="space-y-3 mt-3">
                  <div className="space-y-3">
                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é –≤—ñ–¥ */}
                    <div className="space-y-2">
                      <Label htmlFor="created-from-filter" className="text-sm">–î–∞—Ç–∞ –≤—ñ–¥</Label>
                      <Input
                        id="created-from-filter"
                        type="date"
                        value={createdFromFilter}
                        onChange={(e) => setCreatedFromFilter(e.target.value)}
                        className="h-9 w-full"
                      />
                    </div>

                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é –¥–æ */}
                    <div className="space-y-2">
                      <Label htmlFor="created-to-filter" className="text-sm">–î–∞—Ç–∞ –¥–æ</Label>
                      <Input
                        id="created-to-filter"
                        type="date"
                        value={createdToFilter}
                        onChange={(e) => setCreatedToFilter(e.target.value)}
                        className="h-9 w-full"
                      />
                    </div>
                  </div>
                </CollapsibleContent>
              </Collapsible>

              {/* –§—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ */}
              <Collapsible open={isUserFiltersOpen} onOpenChange={setIsUserFiltersOpen}>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" size="sm" className="w-full justify-between h-8 text-sm">
                    üë§ –§—ñ–ª—å—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    {isUserFiltersOpen ? <ChevronUp className="h-3 w-3" /> : <ChevronDown className="h-3 w-3" />}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="space-y-3 mt-3">
                  <div className="space-y-3">
                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º */}
                    <div className="space-y-2">
                      <Label htmlFor="user-name-filter" className="text-sm">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</Label>
                      <UserAutocomplete
                        value={userNameFilter}
                        onChange={setUserNameFilter}
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
                        className="w-full"
                      />
                    </div>
                  </div>
                </CollapsibleContent>
              </Collapsible>

              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ */}
              <div className="flex gap-2 pt-2">
                <Button onClick={applyFilters} className="flex-1 h-9" disabled={isLoading}>
                  {isLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏"}
                </Button>
                <Button variant="outline" onClick={clearFilters} className="h-9">
                  –û—á–∏—Å—Ç–∏—Ç–∏
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ - —Å–ø—Ä–∞–≤–∞ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö */}
        <div className="flex-1 min-w-0">
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ */}
          {isLoading ? (
            <div className="bg-card border rounded-lg p-6">
              <p className="text-muted-foreground">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤...</p>
            </div>
          ) : requests.length > 0 ? (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤</CardTitle>
                <CardDescription>
                  –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {totalPages} ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ {requests.length} –∑ {totalCount} –∑–∞–ø–∏—Ç—ñ–≤
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>ID</TableHead>
                        <TableHead>–¢–∏–ø –∑–∞–ø–∏—Ç—É</TableHead>
                        <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</TableHead>
                        <TableHead>–î–∞—Ç–∞ –∑–∞–ø–∏—Ç—É</TableHead>
                        <TableHead className="w-[100px]">–î—ñ—ó</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {requests.map((request) => (
                        <TableRow key={request.id} className="hover:bg-muted/50">
                          <TableCell className="font-mono text-sm">
                            {request.id}
                          </TableCell>
                          <TableCell className="max-w-[120px] text-center">
                            <span className={`inline-flex items-center justify-center px-2 py-1 rounded-full text-xs font-medium whitespace-normal break-words line-clamp-2 ${getRequestTypeColors(request.requestType).bg} ${getRequestTypeColors(request.requestType).text}`}>
                              {getRequestTypeLabel(request.requestType)}
                            </span>
                          </TableCell>
                          <TableCell>
                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getRequestStatusColors(request.status).bg} ${getRequestStatusColors(request.status).text}`}>
                              {getRequestStatusLabel(request.status)}
                            </span>
                          </TableCell>
                          <TableCell className="font-medium">
                            {request.requestingUserName}
                          </TableCell>
                          <TableCell className="max-w-[120px]">
                            <div className="text-sm whitespace-normal break-words line-clamp-2">
                              {new Date(request.requestedAt).toLocaleDateString('uk-UA', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                              })}
                            </div>
                          </TableCell>
                          <TableCell>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              onClick={() => {
                                navigate(`/approval-request/${request.id}`);
                              }}
                              className="h-8"
                            >
                              –î–µ—Ç–∞–ª—ñ
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>

                {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
                {totalPages > 1 && (
                  <div className="mt-4">
                    <Pagination>
                      <PaginationContent>
                        <PaginationItem>
                          <PaginationPrevious onClick={goToPrev} className={page === 1 ? 'pointer-events-none opacity-50' : ''} />
                        </PaginationItem>
                        {renderPageNumbers().map((p) => (
                          <PaginationItem key={p}>
                            <PaginationLink isActive={p === page} onClick={() => goToPage(p)}>
                              {p}
                            </PaginationLink>
                          </PaginationItem>
                        ))}
                        <PaginationItem>
                          <PaginationNext onClick={goToNext} className={page === totalPages ? 'pointer-events-none opacity-50' : ''} />
                        </PaginationItem>
                      </PaginationContent>
                    </Pagination>
                  </div>
                )}
              </CardContent>
            </Card>
          ) : (
            <div className="bg-card border rounded-lg p-6">
              <p className="text-muted-foreground">
                –ù–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –æ–±—Ä–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º.
              </p>
            </div>
          )}
        </div>
      </div>

    </div>
  );
}
