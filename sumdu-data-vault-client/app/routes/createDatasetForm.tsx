import { useState } from "react";
import type { Route } from "./+types/createDatasetForm";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Textarea } from "~/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "~/components/ui/card";
import { toast } from "sonner";
import CreateDatasetService from "~/services/api/datasets/CreateDatasetService";

export function meta({}: Route.MetaArgs) {
  return [
    { title: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É - SumduDataVault" },
    { name: "description", content: "–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç –∑ CSV —Ñ–∞–π–ª–æ–º —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏" },
  ];
}

interface CreateDatasetRequest {
  csv: File | null;
  description: string;
  region: string;
  collectedFrom: string;
  collectedTo: string;
  metadata: Array<{ key: string; value: string }>;
  userJustification: string;
}

interface MetadataField {
  id: string;
  key: string;
  value: string;
}

interface CreateDatasetResponse {
  id: number;
  approvalRequestId: number;
}

export default function CreateDatasetForm() {
  const [formData, setFormData] = useState<CreateDatasetRequest>({
    csv: null,
    description: "",
    region: "",
    collectedFrom: "",
    collectedTo: "",
    metadata: [],
    userJustification: "",
  });

  const [metadataFields, setMetadataFields] = useState<MetadataField[]>([]);

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (field: keyof CreateDatasetRequest, value: string | File | null) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addMetadataField = () => {
    const newField: MetadataField = {
      id: Date.now().toString(),
      key: "",
      value: ""
    };
    setMetadataFields(prev => [...prev, newField]);
  };

  const removeMetadataField = (id: string) => {
    setMetadataFields(prev => prev.filter(field => field.id !== id));
  };

  const updateMetadataField = (id: string, fieldType: 'key' | 'value', value: string) => {
    setMetadataFields(prev => 
      prev.map(field => 
        field.id === id ? { ...field, [fieldType]: value } : field
      )
    );
  };

  const convertMetadataToJson = (): string => {
    const metadataObj: Record<string, string> = {};
    metadataFields.forEach(field => {
      if (field.key.trim() && field.value.trim()) {
        metadataObj[field.key.trim()] = field.value.trim();
      }
    });
    return Object.keys(metadataObj).length > 0 ? JSON.stringify(metadataObj) : "";
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    handleInputChange("csv", file);
  };


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    setIsSubmitting(true);

    try {
      if (!formData.csv) {
        throw new Error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª");
      }

      const result = await CreateDatasetService.createDataset({
        Csv: formData.csv,
        Description: formData.description,
        Region: formData.region,
        CollectedFrom: formData.collectedFrom,
        CollectedTo: formData.collectedTo,
        MetadataJson: convertMetadataToJson(),
        UserJustification: formData.userJustification.trim(),
      });
      
      // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É –æ–¥—Ä–∞–∑—É
      setFormData({
        csv: null,
        description: "",
        region: "",
        collectedFrom: "",
        collectedTo: "",
        metadata: [],
        userJustification: "",
      });
      setMetadataFields([]);
      
      toast.success(`–î–∞—Ç–∞—Å–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: ${result.id}). –ó–∞–ø–∏—Ç –Ω–∞ –∞–ø—Ä—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: ${result.approvalRequestId}).`);

    } catch (err) {
      toast.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–∞—Ç–∞—Å–µ—Ç—É: ${err instanceof Error ? err.message : "–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"}`);
    } finally {
      setIsSubmitting(false);
    }
  };


  return (
    <div className="container mx-auto p-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-4">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É</h1>
          <p className="text-lg text-muted-foreground">
            –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –∑–ª—ñ–≤–∞ */}
            <Card>
              <CardHeader>
                <CardTitle>üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</CardTitle>
                <CardDescription>
                  –í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å —Ç–∞ —Ä–µ–≥—ñ–æ–Ω –¥–∞—Ç–∞—Å–µ—Ç—É
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="description">–û–ø–∏—Å –¥–∞—Ç–∞—Å–µ—Ç—É</Label>
                  <Textarea
                    id="description"
                    placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –¥–∞—Ç–∞—Å–µ—Ç—É, –π–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–º—ñ—Å—Ç..."
                    className="min-h-[100px]"
                    value={formData.description}
                    onChange={(e) => handleInputChange("description", e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="region">–†–µ–≥—ñ–æ–Ω</Label>
                  <Input
                    id="region"
                    placeholder="–í–≤–µ–¥—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –£–∫—Ä–∞—ó–Ω–∞, –Ñ–≤—Ä–æ–ø–∞, –ì–ª–æ–±–∞–ª—å–Ω–∏–π)"
                    value={formData.region}
                    onChange={(e) => handleInputChange("region", e.target.value)}
                  />
                </div>

              </CardContent>
            </Card>

            {/* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É - —Å–ø—Ä–∞–≤–∞ */}
            <Card>
              <CardHeader>
                <CardTitle>üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É</CardTitle>
                <CardDescription>
                  –í–∏–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="csv">CSV —Ñ–∞–π–ª</Label>
                    <Input
                      id="csv"
                      type="file"
                      accept=".csv"
                      onChange={handleFileChange}
                      className="cursor-pointer"
                    />
                  </div>
                  {formData.csv && (
                    <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <p className="text-sm text-blue-800">
                        <strong>–í–∏–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª:</strong> {formData.csv.name}
                      </p>
                      <p className="text-sm text-blue-600">
                        –†–æ–∑–º—ñ—Ä: {(formData.csv.size / 1024).toFixed(2)} KB
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –ü–µ—Ä—ñ–æ–¥ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö */}
          <Card>
            <CardHeader>
              <CardTitle>üìÖ –ü–µ—Ä—ñ–æ–¥ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö</CardTitle>
              <CardDescription>
                –í–∫–∞–∂—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥, –∑–∞ —è–∫–∏–π –±—É–ª–∏ –∑—ñ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="collectedFrom">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –∑–±–æ—Ä—É</Label>
                  <Input
                    id="collectedFrom"
                    type="datetime-local"
                    value={formData.collectedFrom}
                    onChange={(e) => handleInputChange("collectedFrom", e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="collectedTo">–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∑–±–æ—Ä—É</Label>
                  <Input
                    id="collectedTo"
                    type="datetime-local"
                    value={formData.collectedTo}
                    onChange={(e) => handleInputChange("collectedTo", e.target.value)}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ú–µ—Ç–∞–¥–∞–Ω—ñ */}
          <Card>
            <CardHeader>
              <CardTitle>üè∑Ô∏è –ú–µ—Ç–∞–¥–∞–Ω—ñ</CardTitle>
              <CardDescription>
                –î–æ–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {metadataFields.map((field, index) => (
                <div key={field.id} className="flex gap-2 items-end">
                  <div className="flex-1 space-y-2">
                    <Label htmlFor={`metadata-key-${field.id}`}>–ù–∞–∑–≤–∞ –ø–æ–ª—è</Label>
                    <Input
                      id={`metadata-key-${field.id}`}
                      placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: source, version, tags"
                      value={field.key}
                      onChange={(e) => updateMetadataField(field.id, 'key', e.target.value)}
                    />
                  </div>
                  <div className="flex-1 space-y-2">
                    <Label htmlFor={`metadata-value-${field.id}`}>–ó–Ω–∞—á–µ–Ω–Ω—è</Label>
                    <Input
                      id={`metadata-value-${field.id}`}
                      placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: API, 1.0, research"
                      value={field.value}
                      onChange={(e) => updateMetadataField(field.id, 'value', e.target.value)}
                    />
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="icon"
                    onClick={() => removeMetadataField(field.id)}
                    className="text-red-600 hover:text-red-700 hover:bg-red-50"
                  >
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </Button>
                </div>
              ))}
              
              <Button
                type="button"
                variant="outline"
                onClick={addMetadataField}
                className="w-full"
              >
                <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
                –î–æ–¥–∞—Ç–∏ –ø–æ–ª–µ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
              </Button>

              {metadataFields.length > 0 && (
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <p className="text-sm text-gray-600 mb-2">–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ JSON:</p>
                  <pre className="text-xs font-mono text-gray-800 bg-white p-2 rounded border overflow-x-auto">
                    {convertMetadataToJson() || "{}"}
                  </pre>
                </div>
              )}
            </CardContent>
          </Card>

          {/* –û–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É */}
          <Card>
            <CardHeader>
              <CardTitle>üí≠ –û–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É</CardTitle>
              <CardDescription>
                –ü–æ—è—Å–Ω—ñ—Ç—å, —á–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–µ–π –¥–∞—Ç–∞—Å–µ—Ç
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="userJustification">–û–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É</Label>
                <Textarea
                  id="userJustification"
                  placeholder="–ß–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–µ–π –¥–∞—Ç–∞—Å–µ—Ç –∞–±–æ –Ω–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø"
                  className="min-h-[100px]"
                  value={formData.userJustification}
                  onChange={(e) => handleInputChange("userJustification", e.target.value)}
                />
              </div>
            </CardContent>
          </Card>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex flex-col sm:flex-row gap-4 justify-end">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => {
                setFormData({
                  csv: null,
                  description: "",
                  region: "",
                  collectedFrom: "",
                  collectedTo: "",
                  metadata: [] as Array<{ key: string; value: string }>,
                  userJustification: "",
                });
                setMetadataFields([]);
                toast.info("–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞");
              }}
            >
              –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
            </Button>
            <Button 
              type="submit" 
              disabled={isSubmitting}
              className="min-w-[140px]"
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è...
                </>
              ) : (
                "–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç"
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
