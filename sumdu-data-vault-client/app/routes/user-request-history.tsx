import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "~/components/ui/card";
import { Button } from "~/components/ui/button";
import { Label } from "~/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "~/components/ui/select";
import { Input } from "~/components/ui/input";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "~/components/ui/collapsible";
import { Filter, ChevronDown, ChevronUp } from "lucide-react";
import GetUserRequestsService from '../services/api/approval/View/GetUserRequestsService';
import type { ApprovalRequestDto, RequestType, RequestStatus, UserRequestFiltersDto } from '../services/api/approval/types';
import { RequestsTable } from '../components/tables/RequestsTable';
import { REQUESTS } from '~/lib/queryKeys';

export default function UserRequestHistory() {
  // –°—Ç–∞–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const [filters, setFilters] = useState<UserRequestFiltersDto>({});
  const [requestTypeFilter, setRequestTypeFilter] = useState<string>("all");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [createdFromFilter, setCreatedFromFilter] = useState<string>("");
  const [createdToFilter, setCreatedToFilter] = useState<string>("");
  
  // –°—Ç–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º —Å–µ–∫—Ü—ñ–π
  const [isBasicFiltersOpen, setIsBasicFiltersOpen] = useState(true);
  const [isDateFiltersOpen, setIsDateFiltersOpen] = useState(false);
  
  // –°—Ç–∞–Ω –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
  const [page, setPage] = useState(1);
  const [pageSize] = useState(10); // –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏

  // React Query –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const requestsQuery = useQuery({
    queryKey: [REQUESTS, filters, page, pageSize],
    queryFn: async () => {
      const skip = (page - 1) * pageSize;
      const requestFilters: UserRequestFiltersDto = {
        ...filters,
        skip: skip,
        take: pageSize
      };
      
      return await GetUserRequestsService.getUserRequests(requestFilters);
    },
    staleTime: 30000, // –î–∞–Ω—ñ –≤–≤–∞–∂–∞—é—Ç—å—Å—è —Å–≤—ñ–∂–∏–º–∏ 30 —Å–µ–∫—É–Ω–¥
    gcTime: 300000, // –ö–µ—à –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è 5 —Ö–≤–∏–ª–∏–Ω
  });

  // –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  const requests = requestsQuery.data || [];
  const isLoading = requestsQuery.isLoading;
  const isError = requestsQuery.isError;
  
  // –û—Å–∫—ñ–ª—å–∫–∏ –Ω–∞—à API –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î totalCount, –º–∏ –æ—Ü—ñ–Ω—é—î–º–æ –π–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  let totalCount = 0;
  let totalPages = 0;
  
  if (requests.length < pageSize) {
    // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–µ–Ω—à–µ –∑–∞–ø–∏—Å—ñ–≤ –Ω—ñ–∂ pageSize, —Ç–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    totalCount = (page - 1) * pageSize + requests.length;
    totalPages = page;
  } else {
    // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, —Ç–æ –º–æ–∂–ª–∏–≤–æ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    totalCount = (page - 1) * pageSize + requests.length + 1; // +1 —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    totalPages = page + 1;
  }

  const applyFilters = () => {
    const newFilters: UserRequestFiltersDto = {};
    
    if (requestTypeFilter && requestTypeFilter !== "all") {
      newFilters.requestType = parseInt(requestTypeFilter) as RequestType;
    }
    
    if (statusFilter && statusFilter !== "all") {
      newFilters.status = parseInt(statusFilter) as RequestStatus;
    }
    
    if (createdFromFilter) {
      newFilters.createdFrom = new Date(createdFromFilter).toISOString();
    }
    
    if (createdToFilter) {
      newFilters.createdTo = new Date(createdToFilter).toISOString();
    }
    
    setFilters(newFilters);
    setPage(1); // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  };

  const clearFilters = () => {
    setRequestTypeFilter("all");
    setStatusFilter("all");
    setCreatedFromFilter("");
    setCreatedToFilter("");
    setFilters({});
    setPage(1); // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–º–∏–ª–æ–∫
  if (isError) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <h1 className="text-3xl font-bold tracking-tight">–Ü—Å—Ç–æ—Ä—ñ—è –º–æ—ó—Ö –∑–∞–ø–∏—Ç—ñ–≤</h1>
        </div>
        <Card>
          <CardContent className="p-6">
            <p className="text-red-600">–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6">
        <h1 className="text-3xl font-bold tracking-tight">–Ü—Å—Ç–æ—Ä—ñ—è –º–æ—ó—Ö –∑–∞–ø–∏—Ç—ñ–≤</h1>
      </div>

      {/* –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –º–∞–∫–µ—Ç: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –¥–ª—è –º–∞–ª–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö */}
      <div className="flex flex-col lg:flex-row lg:gap-6">
        {/* –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ - –∑–ª—ñ–≤–∞ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö */}
        <div className="lg:w-80 lg:flex-shrink-0 mb-6 lg:mb-0">
          <Card className="sticky top-4">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Filter className="h-4 w-4" />
                –§—ñ–ª—å—Ç—Ä–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* –ë–∞–∑–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
              <Collapsible open={isBasicFiltersOpen} onOpenChange={setIsBasicFiltersOpen}>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" size="sm" className="w-full justify-between h-8 text-sm">
                    üîç –ë–∞–∑–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
                    {isBasicFiltersOpen ? <ChevronUp className="h-3 w-3" /> : <ChevronDown className="h-3 w-3" />}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="space-y-3 mt-3">
                  <div className="space-y-3">
                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º –∑–∞–ø–∏—Ç—É */}
                    <div className="space-y-2">
                      <Label htmlFor="request-type-filter" className="text-sm">–¢–∏–ø –∑–∞–ø–∏—Ç—É</Label>
                      <Select value={requestTypeFilter} onValueChange={setRequestTypeFilter}>
                        <SelectTrigger className="h-9 w-full">
                          <SelectValue placeholder="–í—Å—ñ —Ç–∏–ø–∏" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">–í—Å—ñ —Ç–∏–ø–∏</SelectItem>
                          <SelectItem value="0">–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö</SelectItem>
                          <SelectItem value="1">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º */}
                    <div className="space-y-2">
                      <Label htmlFor="status-filter" className="text-sm">–°—Ç–∞—Ç—É—Å</Label>
                      <Select value={statusFilter} onValueChange={setStatusFilter}>
                        <SelectTrigger className="h-9 w-full">
                          <SelectValue placeholder="–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</SelectItem>
                          <SelectItem value="0">–û—á—ñ–∫—É—î —Ä–æ–∑–≥–ª—è–¥—É</SelectItem>
                          <SelectItem value="1">–°—Ö–≤–∞–ª–µ–Ω–æ</SelectItem>
                          <SelectItem value="2">–í—ñ–¥—Ö–∏–ª–µ–Ω–æ</SelectItem>
                          <SelectItem value="3">–°–∫–∞—Å–æ–≤–∞–Ω–æ</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CollapsibleContent>
              </Collapsible>

              {/* –§—ñ–ª—å—Ç—Ä–∏ –¥–∞—Ç */}
              <Collapsible open={isDateFiltersOpen} onOpenChange={setIsDateFiltersOpen}>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" size="sm" className="w-full justify-between h-8 text-sm">
                    üìÖ –§—ñ–ª—å—Ç—Ä–∏ –¥–∞—Ç
                    {isDateFiltersOpen ? <ChevronUp className="h-3 w-3" /> : <ChevronDown className="h-3 w-3" />}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="space-y-3 mt-3">
                  <div className="space-y-3">
                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é –≤—ñ–¥ */}
                    <div className="space-y-2">
                      <Label htmlFor="created-from-filter" className="text-sm">–î–∞—Ç–∞ –≤—ñ–¥</Label>
                      <Input
                        id="created-from-filter"
                        type="date"
                        value={createdFromFilter}
                        onChange={(e) => setCreatedFromFilter(e.target.value)}
                        className="h-9 w-full"
                      />
                    </div>

                    {/* –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é –¥–æ */}
                    <div className="space-y-2">
                      <Label htmlFor="created-to-filter" className="text-sm">–î–∞—Ç–∞ –¥–æ</Label>
                      <Input
                        id="created-to-filter"
                        type="date"
                        value={createdToFilter}
                        onChange={(e) => setCreatedToFilter(e.target.value)}
                        className="h-9 w-full"
                      />
                    </div>
                  </div>
                </CollapsibleContent>
              </Collapsible>

              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ */}
              <div className="flex gap-2 pt-2">
                <Button onClick={applyFilters} className="flex-1 h-9" disabled={isLoading}>
                  {isLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏"}
                </Button>
                <Button variant="outline" onClick={clearFilters} className="h-9">
                  –û—á–∏—Å—Ç–∏—Ç–∏
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ - —Å–ø—Ä–∞–≤–∞ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö */}
        <div className="flex-1 min-w-0">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ú–æ—ó –∑–∞–ø–∏—Ç–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <RequestsTable
                requests={requests}
                page={page}
                totalPages={totalPages}
                totalCount={totalCount}
                isLoading={isLoading}
                showUserColumn={false}
                onPageChange={handlePageChange}
              />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
